<?
include 'function-pre.php';

$name="forEachAgent";

$declaration="
void __stdcall forEachAgent(
	bool (*func)(pState,int,int,pState*,int,int)	// name of function
);
";

$parameters="
" . pt() . "func
" . pd() . "The name of a function to apply to each agent in turn.  (See <a href=\"#Remarks\">Remarks</a>.)  
";

$remarks="
This function is available through the API.  It provides an efficient way to process every agent in turn.  

<blockquote>
<h3>func</h3>
<tt>func</tt> is the name of a function with the following declaration:
<pre>
bool func(
	pState state,  	// array of agent state variables
	int x,        	// X-coordinate of agent
	int y,        	// Y-coordinate of agent
	pState *nbr,   	// array of neighbours
	int nbrCount, 	// size of nbr array, nbr[0..nbrCount-1]
	int feaMode   	// calling mode, one of feaBegin, feaContinue or feaEnd
);
</pre>

The parameters <tt>param, state, x, y, nbr,</tt> and <tt>nbrCount</tt> are passed into the function with the appropriate values to enable processing of each agent.  The function is called first with parameter <tt>feaMode=feaBegin</tt> (and an arbitrary agent), then once for each agent with <tt>feaMode=feaContinue</tt> and finally, once more with <tt>feaMode=feaEnd</tt> (and the last agent again).  See " . ref("forEachAgentVar") . "for an example of how to use <tt>feaMode</tt>.

<p>The function must return a boolean value.  The return value is ignored when <tt>feaMode</tt> is not <tt>feaContinue</tt>.  When <tt>feaMode=feaContinue</tt> a return value of <tt>true</tt> indicates that the next agent in the sequence should be processed, <tt>false</tt> tells <tt>forEachAgent</tt> to prematurely abort processing of the agents.  In this case, <tt>func</tt> will only be called one more time with the same agent and <tt>feaMode=feaEnd</tt>.
</blockquote>
";

$example="
bool stage1(" . ref("pState") . " state, int x, int y, " . ref("pState") . " *nbr, int nbrCount,
            int feaMode)
// count live neighbours (called in onTick)
{
    if (feaMode!=feaContinue)	return true;
    // store # live neighbours in state[1]
    state[1] = 0;
    for (int i=0; i&lt;nbrCount; i++)	state[1] += nbr[i][0];
    return true;
}
bool stage2(" . ref("pState") . " state, int x, int y, " . ref("pState") . " *nbr, int nbrCount,
            int feaMode)
// update alive/dead state (called in onTick)
{
    if (feaMode!=feaContinue)	return true;
    // Conway's game of Life
    if (state[1] == 3)	   	state[0] = 1;
    else if (state[1] != 2)	state[0] = 0;
    // else no change (count==2)
    return true;
}
void __stdcall onTick(double &time)
{
    forEachAgent(stage1);      	// count live neighbours
    forEachAgent(stage2);      	// update alive/dead state
}
";

$revisions="
API v1.5<ul><li>no longer passes <tt>param</tt> to <tt>func</tt>
	</ul>
";

$seeAlso="
" . ref("forEachAgentVar">, " . ref("onTick">.
";
